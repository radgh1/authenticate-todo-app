import Head from 'next/head'
//import Image from 'next/image'
import Navbar from '../components/Navbar';
import Todo from '../components/Todo';
import { table, minifyRecords } from './api/utils/airtable';
import { TodosContext } from '../contexts/TodosContext';
import { useEffect, useContext } from 'react';
//import auth0 from './api/utils/auth0';
import { getSession } from '@auth0/nextjs-auth0'
import { useUser } from '@auth0/nextjs-auth0';
import TodoForm from '../components/TodoForm';

export default function Home({ initialTodos }) {
  const { todos, setTodos } = useContext(TodosContext);
  const { user } = useUser();
  //console.log('User:');
  //console.log(user);

  useEffect(() => {
      setTodos(initialTodos);
  }, []);

  return (
    <div>
      <Head>
        <title>Authenticated TODO App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
        <Navbar />
      <main >
        <h1 className = "flex items-center justify-center"
          >My Todos
        </h1>
        {user ? (
          <>
              <TodoForm />
              <ul>
                  {todos &&
                      todos.map((todo) => (
                          <Todo todo={todo} key={todo.id} />
                      ))}
              </ul>
          </>
        ) : (
          <p className="text-center mt-4">
              Please login to save todos!
          </p>
        )}
      </main>
    </div>
  )
}

export async function getServerSideProps(context) {
  //const session = auth0.getSession(context.req, context.res);
  //console.log('Session:');
  //console.log(session);
  try {
    //const todos = await table.select({}).firstPage();
    //const session = auth0.getSession(context.req, context.res);
    const session = getSession(context.req, context.res);
    //console.log('Session:');
    //console.log(session);
    let todos = [];
    if (session?.user) {
        todos = await table
            .select({ filterByFormula: `userid = '${session.user.sub}'` })
            .firstPage();
    }    
    return {
        props: {
            initialTodos: minifyRecords(todos),
            user: session?.user || null,
        }
    }
  } catch (err) {
    console.error(err);
    return {
      props: {
          err: "Something went wrong"
      }
    }
  }
}
